---
import Wallpaper from "../components/Wallpaper.astro";
import Header from "../components/Header.astro";
import TopNav from "../components/TopNav.astro";
import Suplement from "../components/Suplement.astro";
import Footer from "../components/Footer.astro";

import { getImage } from "@astrojs/image";
const wallpaperRefsRaw = await Astro.glob("../assets/wallpapers/*.jpeg");

const wallpaperReft = await Promise.all(
  wallpaperRefsRaw.map((ref) => {
    ref.default.format = "webp";
    return getImage(ref.default);
  })
);
const wallpapers = wallpaperReft
  .map((wallpaper) => wallpaper.src)
  .filter((src): src is string => typeof src === "string");

export interface Props {
  frontmatter: {
    title: string;
    description: string;
  };
}

const { frontmatter } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="dmi3y" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" /><link
      rel="preconnect"
      href="https://fonts.gstatic.com"
      crossorigin
    />
    <link
      rel="preload"
      as="style"
      href="https://fonts.googleapis.com/css2?family=Alfa+Slab+One&display=swap"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Alfa+Slab+One&display=swap"
      rel="stylesheet"
    />
    <link rel="preload" as="image" href={wallpapers[0]} />
    <title>{frontmatter.title}</title>
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={frontmatter.description} />
  </head>
  <body class="page">
    <Wallpaper wallpapers={wallpapers} />
    <main id="main-holder" class="wrapper">
      <TopNav />
      <Header />
      <section id="main" class="slot">
        <slot />
      </section>
      <Suplement />
      <Footer />
    </main>
  </body>
</html>

<style is:global>
  @keyframes flash {
    0% {
      background-color: var(--flash-color-opacity);
    }
  }
  :root {
    --layout-width: 1100px;

    --flash-color: rgb(255, 255, 255);
    --flash-color-opacity: rgba(255, 255, 255, 0.9);
    --flash-animation-duration: 1.5s;

    --bg-color: rgb(0, 0, 0);
    --bg-color-opacity: rgba(0, 0, 0, 0.9);

    --font-family-main: Verdana, Geneva, sans-serif;
    --font-size-main: 20pt;
    --font-color: rgb(255, 255, 255);

    --link-color: rgb(252, 97, 8);
  }
  .clr {
    clear: both;
  }

  html,
  body {
    font-family: var(--font-family-main);
    font-size: var(--font-size-main);
    color: var(--font-color);
    padding: 0;
    margin: 0;
    height: 100%;
    scroll-behavior: smooth;
  }

  a {
    color: var(--link-color);
    text-decoration: none;
  }

  a:hover {
    text-decoration: underline;
  }

  /* Layout */
  .wrapper {
    margin: 0 auto;
    width: 80%;
    max-width: var(--layout-width);
    min-height: 100%;
  }

  .slot {
    background-color: var(--bg-color-opacity);
    padding: 15px;
    margin-top: 35px;
  }

  .slot:target {
    animation-name: flash;
    animation-duration: var(--flash-animation-duration);
  }

  section {
    animation-delay: 0.5s;
  }

  /* Responsive */
  @media (max-width: 600px) {
    .wrapper {
      width: 99%;
    }
  }
</style>
